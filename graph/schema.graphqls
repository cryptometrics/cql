# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  id: ID!
  name: String!
}

type CoinbaseCurrencyDetails {
  type: String
  symbol: String
  networkConfirmations: Int
  sortOrder: Int
  cryptoAddressLink: String
  cryptoTransactionLink: String
  pushPaymentMethods: [String]
  groupTypes: [String]
}

type CoinbaseCurrency {
  id: String!
  name: String!
  minSize: Float
  status: String
  message: String
  maxPrecision: Float
  convertibleTo: [String]
  details: CoinbaseCurrencyDetails
  displayName: String
  processingTimeSeconds: Int
  minWithdrawalAmount: Int
  maxWithdrawalAmount: Int
}

type CoinbaseBuyPrice {
  amount: Float!
  currency: String!
}

type CoinbaseProduct {
  id: String
  displayName: String
  baseCurrency: String
  quoteCurrency: String
  baseIncrement: Float
  quoteIncrement: Float
  baseMinSize: Float
  baseMaxSize: Float
  minMarketFunds: Float
  maxMarketFunds: Float
  status: String
  statusMessage: String
  cancelOnly: Boolean
  limitOnly: Boolean
  postOnly: Boolean
  tradingDisabled: Boolean
  fxStablecoin: Boolean
}

"""
CoinbaseProductOrderBookBidAsk is the object encapsulation of the a list of
values defined by the level passed to the client
"""
type CoinbaseProductOrderBookBidAsk {
  """
  price is either bid/ask price
  """
  price: Float

  """
  size is the amount of the product purchased at the bid/ask price
  """
  size: Float

  """
  numOrders orders executed at the price, specific to level 2
  """
  numOrders: Int

  """
  orderID is the uuid associated with the order, specific to level 3
  """
  orderID: String
}
"""
CoinbaseProductOrderBook holds bid/ask data as a list of open orders for a
product. The amount of detail shown can be customized with the level
parameter
"""
type CoinbaseProductOrderBook {
  """
  sequence represents the nth iterration of the order book update
  """
  sequence: Int

  """
  bids are the object encapsulations of the list of data returned by coinbase.
  More specifically, a bid price refer to the highest price that traders are
  willing to pay for a product
  """
  bids: [CoinbaseProductOrderBookBidAsk]

  """
  asks are the object encapsulations of the list of data returned by coinbase.
  More specifically, ab ask price refers to the lowest price that the owners of
  that product are willing to sell it for
  """
  asks: [CoinbaseProductOrderBookBidAsk]
}

type Query {
  coinbaseCurrencies(test: String): [CoinbaseCurrency]
  coinbaseCurrency(id: String!): CoinbaseCurrency
  coinbaseBuyPrice(currencyPair: String!): CoinbaseBuyPrice
  coinbaseProducts(test: String): [CoinbaseProduct]
  coinbaseProduct(id: String!): CoinbaseProduct
  coinbaseProductOrderBook(
    id: String!
    level: String!
  ): CoinbaseProductOrderBook
}

input NewTodo {
  text: String!
  userId: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}
