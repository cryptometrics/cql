# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  id: ID!
  name: String!
}

"""
CoinbaseAccountHistoryDetails are the details for account history
"""
type CoinbaseAccountHistoryDetails {
  orderID: String
  tradeID: String
  productID: String
}

"""
CoinbaseAccountHistory encapsulates data for account activity of the API
key's profile. Account activity either increases or decreases your account
balance. Items are paginated and sorted latest first. See the Pagination
section for retrieving additional entries after the first page.
"""
type CoinbaseAccountHistory {
  id: String
  createdAt: Time
  amount: Float
  balance: Float
  type: String
  details: CoinbaseAccountHistoryDetails
}

"""
CoinbaseAccountHold represents a hold of an account that belong to the same
profile as the API key. Holds are placed on an account for any active orders
or pending withdraw requests. As an order is filled, the hold amount is
updated. If an order is canceled, any remaining hold is removed. For a
withdraw, once it is completed, the hold is removed
"""
type CoinbaseAccountHold {
  id: String
  accountID: String
  createdAt: Time
  updatedAt: Time
  amount: Float
  type: String
  ref: String
}

"""
CoinbaseAccount encapsulates information for a coinbase account
"""
type CoinbaseAccount {
  id: String
  currency: String
  balance: Float
  available: Float
  hold: Float
  profileID: String
  tradingEnabled: Boolean
}

type CoinbaseCurrencyDetails {
  type: String
  symbol: String
  networkConfirmations: Int
  sortOrder: Int
  cryptoAddressLink: String
  cryptoTransactionLink: String
  pushPaymentMethods: [String]
  groupTypes: [String]
}

"""
CoinbaseCurrency holds currency data from the coinbase API. Currency codes will
conform to the ISO 4217 standard where possible. Currencies which have or had no
representation in ISO 4217 may use a custom code.
"""
type CoinbaseCurrency {
  """
  id is the code coinbase uses to recognize an asset, e.g. BTC, ETH, etc
  """
  id: String!

  """
  name is the full name associated with the id/code
  """
  name: String!

  minSize: Float
  status: String
  message: String
  maxPrecision: Float
  convertibleTo: [String]
  details: CoinbaseCurrencyDetails
  displayName: String
  processingTimeSeconds: Int
  minWithdrawalAmount: Int
  maxWithdrawalAmount: Int
}

type CoinbaseBuyPrice {
  amount: Float!
  currency: String!
}

"""
CoinbaseProduct returns the market data for a specific currency pair. Only a
maximum of one of trading_disabled, cancel_only, post_only, limit_only can be
true at once. If none are true, the product is trading normally.
"""
type CoinbaseProduct {
  """
  id specifies the product as a pair on the coinbase app in the form
  {baseCurrency}-{quoteCurrency}, e.g. BTC-USD, ETH-BTC, etc
  """
  id: String

  """
  displayName is a human-readable format of id i.e. {baseCurrency} per
  {quoteCurrency}
  """
  displayName: String

  """
  baseCurrency is the currency we are measuring in terms of the quote currency
  """
  baseCurrency: String

  """
  quoteCurrency is the currency we are using to compare with the baseCurrency
  """
  quoteCurrency: String

  """
  baseIncrement specifies the minimum increment for the base_currency
  """
  baseIncrement: Float

  """
  quoteIncrement field specifies the min order price as well as the price
  increment.  The order price must be a multiple of this increment (i.e. if the
  increment is 0.01, order prices of 0.001 or 0.021 would be rejected
  """
  quoteIncrement: Float

  """
  baseMinSize defines the min order size
  """
  baseMinSize: Float

  """
  baseMaxSize defines the max order siz
  """
  baseMaxSize: Float

  """
  minMarketFunds defines the min funds allowed in a market order
  """
  minMarketFunds: Float

  """
  maxMarketFunds defines the max funds allowed in a market orde
  """
  maxMarketFunds: Float

  """
  status reflects the condition of the product on coinbase, whether it's online,
  etc
  """
  status: String

  """
  statusMessage provides any extra information regarding the status if
  available
  """
  statusMessage: String

  """
  cancelOnly indicates whether this product only accepts cancel requests for
  orders
  """
  cancelOnly: Boolean

  """
  limitOnly indicates whether this product only accepts limit orders
  """
  limitOnly: Boolean

  """
  postOnly indicates whether only maker orders can be placed. No orders will be
  matched when post_only mode is active
  """
  postOnly: Boolean

  """
  tradingDisabled indicates whether trading is currently restricted on this
  product, this includes whether both new orders and order cancelations are
  restricted.
  """
  tradingDisabled: Boolean

  """
  fxStablecoin indicates whether the currency pair is a Stable Pair
  """
  fxStablecoin: Boolean
}

"""
CoinbaseProductDailyStats encapsulates 24 hr stats for the product
"""
type CoinbaseProductDailyStats {
  """
  open is in quote currency units; product={base}-{quote}
  """
  open: Float

  """
  high is in quote currency units; product={base}-{quote}
  """
  high: Float
  low: Float

  """
  Volume is in base currency units; product={base}-{quote}
  """
  volume: Float
  last: Float
  volume30Day: Float
}

"""
CoinbaseProductHistoricalRate are historic rates for a product. Rates are
returned in grouped buckets based on requested granularity.

Historical rate data may be incomplete. No data is published for intervals
where there are no ticks.

Historical rates should not be polled frequently. If you need real-time
information, use the trade and book endpoints along with the websocket feed.
"""
type CoinbaseProductHistoricalRate {
  """
  Time is the bucket start time
  """
  time: Time

  """
  Low is the lowest price during the bucket interval
  """
  low: Float

  """
  High is the highest price during the bucket interval
  """
  high: Float

  """
  Open is the opening price (first trade) in the bucket interval
  """
  open: Float

  """
  Close is the closing price (last trade) in the bucket interval
  """
  close: Float

  """
  Volume is the volume of trading activity during the bucket interval
  """
  volume: Float
}

"""
CoinbaseProductOrderBookBidAsk is the object encapsulation of the a list of
values defined by the level passed to the client
"""
type CoinbaseProductOrderBookBidAsk {
  """
  price is either bid/ask price
  """
  price: Float

  """
  size is the amount of the product purchased at the bid/ask price
  """
  size: Float

  """
  numOrders orders executed at the price, specific to level 2
  """
  numOrders: Int

  """
  orderID is the uuid associated with the order, specific to level 3
  """
  orderID: String
}

"""
CoinbaseProductOrderBook holds bid/ask data as a list of open orders for a
product. The amount of detail shown can be customized with the level
parameter
"""
type CoinbaseProductOrderBook {
  """
  sequence represents the nth iterration of the order book update
  """
  sequence: Int

  """
  bids are the object encapsulations of the list of data returned by coinbase.
  More specifically, a bid price refer to the highest price that traders are
  willing to pay for a product
  """
  bids: [CoinbaseProductOrderBookBidAsk]

  """
  asks are the object encapsulations of the list of data returned by coinbase.
  More specifically, ab ask price refers to the lowest price that the owners of
  that product are willing to sell it for
  """
  asks: [CoinbaseProductOrderBookBidAsk]
}

"""
CoinbaseProductTicket encapsulates snapshot information about the last trade
(tick), best bid/ask and 24h volume.  Polling is discouraged in favor of
connecting via the websocket stream and listening for match messages
"""
type CoinbaseProductTicker {
  tradeID: Int
  price: Float
  size: Float
  bid: Float
  ask: Float
  volume: Float
  time: Time
}

"""
CoinbaseProductTrade lists the latest trades for a product
"""
type CoinbaseProductTrade {
  time: Time
  tradeID: Int
  price: Float
  size: Float

  """
  side indicates the maker order side. The maker order is the order that was
  open on the order book. buy side indicates a down-tick because the maker was a
  buy order and their order was removed. Conversely, sell side indicates an
  up-tick.
  """
  side: String
}

"""
CoinbaseTime encapsulates the coinbase API server time
"""
type CoinbaseTime {
  iso: String

  """
  epoch represents decimal seconds since Unix Epoch
  """
  epoch: Float
}

type Query {
  coinbaseAccountHistory(
    """
    Returns list of ledger entries from this account id.
    """
    id: String!

    """
    Parameter requires a positive integer. If set, returns ledger entries before
    the specified integer.
    """
    before: Int

    """
    Parameter requires a positive integer. If set, returns ledger entries after
    the specified integer.
    """
    after: Int

    """
    If set, returns ledger entries created after the start_date timestamp,
    sorted by newest creation date. When combined with end_date, returns ledger
    entries in the specified time range.
    """
    startDate: String

    """
    If set, returns ledger entries created before the end_date timestamp, sorted
    by newest creation date.
    """
    endDate: String

    """
    Number of results per request. Maximum 1000. (default 1000)
    """
    limit: Int
  ): [CoinbaseAccountHistory]

  """
  List holds of an account that belong to the same profile as the API key. Holds
  are placed on an account for any active orders or pending withdraw requests.
  As an order is filled, the hold amount is updated. If an order is canceled,
  any remaining hold is removed. For a withdraw, once it is completed, the hold
  is removed
  """
  coinbaseAccountHold(
    id: String!

    """
    Pagination parameter that requires a positive integer. If set, returns a
    list of holds before the specified integer.
    """
    before: Int

    """
    Pagination parameter that requires a positive integer. If set, returns a
    list of holds after the specified integer.
    """
    after: Int

    """
    Number of results per request. Maximum 1000. (default 1000)
    """
    limit: Int
  ): [CoinbaseAccountHold]

  coinbaseAccount(id: String!): CoinbaseAccount
  coinbaseAccounts(test: String): [CoinbaseAccount]
  coinbaseCurrencies(test: String): [CoinbaseCurrency]
  coinbaseCurrency(id: String!): CoinbaseCurrency
  coinbaseProducts(test: String): [CoinbaseProduct]

  coinbaseProduct(
    """
    id is the product of the form {baseCurrency}-{quoteCurrency}
    """
    id: String!
  ): CoinbaseProduct

  coinbaseProductDailyStats(
    """
    id is the product of the form {baseCurrency}-{quoteCurrency}
    """
    id: String!
  ): CoinbaseProductDailyStats

  coinbaseProductHistoricalRate(
    """
    id is the product of the form {baseCurrency}-{quoteCurrency}
    """
    id: String!

    """
    start time in ISO 8601
    """
    start: String!

    """
    end time in ISO 8601
    """
    end: String!

    """
    granularity must be one of the following values:

    	{60, 300, 900, 3600, 21600, 86400}

    Otherwise, your request will be rejected. These values correspond to
    timeslices representing one minute, five minutes, fifteen minutes, one hour,
    six hours, and one day, respectively.
    """
    granularity: Int!
  ): [CoinbaseProductHistoricalRate]

  coinbaseProductOrderBook(
    """
    id is the product of the form {baseCurrency}-{quoteCurrency}
    """
    id: String!
    level: String!
  ): CoinbaseProductOrderBook

  coinbaseProductTicker(
    """
    id is the product of the form {baseCurrency}-{quoteCurrency}
    """
    id: String!
  ): CoinbaseProductTicker

  coinbaseProductTrade(
    """
    id is the product of the form {baseCurrency}-{quoteCurrency}
    """
    id: String!
  ): [CoinbaseProductTrade]

  coinbaseTime(test: String): CoinbaseTime
}

input NewTodo {
  text: String!
  userId: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}
