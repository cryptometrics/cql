// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"cql/scalar"
)

type CoinbaseAccountHoldOptions struct {
	// Pagination parameter that requires a positive integer. If set, returns a
	// list of holds before the specified integer.
	Before *string `json:"before"`
	// Pagination parameter that requires a positive integer. If set, returns a
	// list of holds after the specified integer.
	After *string `json:"after"`
	// Number of results per request. Maximum 1000. (default 1000)
	Limit *int `json:"limit"`
}

type CoinbaseAccountLedgerOptions struct {
	// Parameter requires a positive integer. If set, returns ledger entries before
	// the specified integer.
	Before *string `json:"before"`
	// Parameter requires a positive integer. If set, returns ledger entries after
	// the specified integer.
	After *string `json:"after"`
	// If set, returns ledger entries created after the start_date timestamp,
	// sorted by newest creation date. When combined with end_date, returns ledger
	// entries in the specified time range.
	StartDate *string `json:"startDate"`
	// If set, returns ledger entries created before the end_date timestamp, sorted
	// by newest creation date.
	EndDate *string `json:"endDate"`
	// Number of results per request. Maximum 1000. (default 1000)
	Limit     *int    `json:"limit"`
	ProfileID *string `json:"profileID"`
}

type CoinbaseAccountTransferOptions struct {
	// Used for pagination. Sets start cursor to before date.
	Before *string `json:"before"`
	// Used for pagination. Sets end cursor to after date.
	After *string `json:"after"`
	// Limit on number of results to return.
	Limit *int    `json:"limit"`
	Type  *string `json:"type"`
}

type CoinbaseCurrencyConversionOpts struct {
	ProfileID *string `json:"profileID"`
	Nonce     *string `json:"nonce"`
}

type CoinbaseOrderInput struct {
	// buy or sell
	Side scalar.OrderSide `json:"side"`
	// A valid product id, these are of the form {baseCurrency}-{quoteCurrency}, e.g
	// BTC-USD.  The product_id must match a valid product. The products list is
	// available via the /products endpoint.
	ProductID string `json:"productID"`
	// [optional] Order ID selected by you to identify your order.  The optional
	// client_oid field must be a UUID generated by your trading application. This
	// field value will be broadcast in the public feed for received messages. You
	// can use this field to identify your orders in the public feed.  The client_oid
	// is different than the server-assigned order id. If you are consuming the
	// public feed and see a received message with your client_oid, you should record
	// the server-assigned order_id as it will be used for future order status
	// updates. The client_oid will NOT be used after the received message is sent.
	// The server-assigned order id is also returned as the id field to this HTTP
	// POST request.
	ClientOid *string `json:"clientOID"`
	// [optional] Self-trade prevention flag.  Self-trading is not allowed on
	// Coinbase Pro. Two orders from the same user will not be allowed to match with
	// one another. To change the self-trade behavior, specify the stp flag.
	Stp *scalar.OrderSTP `json:"stp"`
	// Either loss or entry. Requires stop_price to be defined.
	Stop *scalar.OrderSide `json:"stop"`
	// [optional] Only if stop is defined. Sets trigger price for stop order.
	StopPrice *string `json:"stopPrice"`
	// The price must be specified in quote_increment product units. The quote
	// increment is the smallest unit of price. For example, the BTC-USD product has
	// a quote increment of 0.01 or 1 penny. Prices less than 1 penny will not be
	// accepted, and no fractional penny prices will be accepted. Not required for
	// market orders.
	Price float64 `json:"price"`
	// The size must be greater than the base_min_size for the product and no larger
	// than the base_max_size. The size can be in incremented in units of
	// base_increment. size indicates the amount of BTC (or base currency) to buy or
	// sell.
	Size float64 `json:"size"`
	// [optional] GTC, GTT, IOC, or FOK (default is GTC).  Time in force policies
	// provide guarantees about the lifetime of an order. There are four policies:
	// good till canceled GTC, good till time GTT, immediate or cancel IOC, and fill
	// or kill FOK.
	TimeInForce *scalar.TimeInForce `json:"timeInForce"`
	// [optional]* min, hour, day
	CancelAfter *scalar.OrderCancelTime `json:"cancelAfter"`
	// [optional]** Post only flag.  The post-only flag indicates that the order
	// should only make liquidity. If any part of the order results in taking
	// liquidity, the order will be rejected and no part of it will execute.
	PostOnly *bool `json:"postOnly"`
}

type CoinbaseOrderQueryParameters struct {
	// Limit list of orders to these statuses. Passing all returns orders of all
	// statuses. Valid statuses: 'open', 'pending', 'rejected', 'done', 'active'.
	//
	// Default: 	['open', 'pending', 'active']
	Statuses []*string `json:"statuses"`
	// Only list orders for a specific product
	Products []*string `json:"products"`
	// Limit list of orders to after this start_date
	StartDate *string `json:"startDate"`
	// Limit list of orders to before this end_date
	EndDate *string `json:"endDate"`
	// Pagination parameter that requires a positive integer. If set, returns a list
	// of orders before the specified integer.
	Before *int `json:"before"`
	// Pagination parameter that requires a positive integer. If set, returns a list
	// of orders after the specified integer.
	After *int `json:"after"`
	// Number of results per request. Maximum 1000. (default 1000)
	Limit *int `json:"limit"`
}
