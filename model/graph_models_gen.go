// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"cql/scalar"
)

type CoinbaseLimitOrderInput struct {
	Base *CoinbaseOrderInputBase `json:"base"`
	// price / asset
	Price float64 `json:"price"`
	// Amount of base currency to buy or sell
	Size float64 `json:"size"`
	// [optional] GTC, GTT, IOC, or FOK (default is GTC)
	TimeInForce *scalar.TimeInForce `json:"timeInForce"`
	// [optional]* min, hour, day
	CancelAfter *scalar.OrderCancelTime `json:"cancelAfter"`
	// [optional]** Post only flag
	PostOnly *bool `json:"postOnly"`
}

type CoinbaseOrderInputBase struct {
	// buy or sell
	Side scalar.OrderSide `json:"side"`
	// A valid product id, these are of the form {baseCurrency}-{quoteCurrency}, e.g
	// BTC-USD
	ProductID string `json:"productID"`
	// [optional] Order ID selected by you to identify your order
	ClientOid *string `json:"clientOID"`
	// [optional] limit or market (default is limit)
	Type *scalar.OrderType `json:"type"`
	// [optional] Self-trade prevention flag
	Stp *scalar.OrderSTP `json:"stp"`
	// Either loss or entry. Requires stop_price to be defined.
	Stop *scalar.OrderSide `json:"stop"`
	// [optional] Only if stop is defined. Sets trigger price for stop order.
	StopPrice *string `json:"stopPrice"`
}
